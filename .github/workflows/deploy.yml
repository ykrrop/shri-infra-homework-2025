name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to deploy"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Docker login to Yandex Cloud
        run: |
          echo "${{ secrets.YA_OAUTH }}" \
            | docker login --username oauth --password-stdin cr.yandex

      - name: Check if image exists
        run: |
          IMAGE="cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.event.inputs.version }}_latest"
          docker manifest inspect "$IMAGE" > /dev/null 2>&1 \
            || (echo "Image not found: $IMAGE" && exit 1)

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            IMAGE="cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.event.inputs.version }}_latest"

            echo "${{ secrets.YA_OAUTH }}" | sudo docker login --username oauth --password-stdin cr.yandex


            sudo docker pull "$IMAGE"


            sudo docker stop app_container || true
            sudo docker rm app_container   || true

            sudo docker run -d --name app_container "$IMAGE"

      - name: Comment on Release Issue
        uses: actions/github-script@v7
        with:
          script: |
            // 1) получаем список открытых релиз-ишью
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 50
            });

            // 2) находим нужную по title = Release v<version>
            const title = `Release v${github.event.inputs.version}`;
            const issue = issues.data.find(i => i.title === title);
            if (!issue) {
              throw new Error(`Issue not found: "${title}"`);
            }

            // 3) формируем и отправляем комментарий
            const actor = context.actor;
            const today = new Date().toISOString().slice(0,10);
            const imageRef = `cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${github.event.inputs.version}_latest`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: [
                `Прод @${actor} от ${today}.`,
                `Образ: \`${imageRef}\``
              ].join("\n")
            });
